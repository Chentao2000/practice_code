/******************************************************************************
 第 7 章 ： 动态规划
    
    7.1 数字三角形 ！
    
    7.1 基本思想 ：
            单纯的递归再解决某些问题时候效率会非常的低
            比如 数字 三角形 POJ(1163)
    
        问题描述 ：     7 
                    3       8
                8       1      0
            2       7       4       4
        4       5       2       6       5
        
        上面给出了一个数字三角形，从三角形顶部到底部有多少各不同的路径
        对于每条路径，把路径上面的数加起来可以得到一个和，累加和最大的路径被称为“最短路径”
        题目的任务 就是求出最佳路径上的数字之和
        
        输入数据 ： 第一行是一个整数 N , 给出三角形的行数，下面的 N 行给出数字三角形，
        数字三角形中的数的范围都在 0 ~ 100 之间
        
        输出数据： 输出最大的和
        
        输入样例 5 
                7 
               3  8
              8   1   0 
             2    7   4   4
            4     5   2    6  5

        解题思路 ： 
           这道题可以用递归的方法解决，基本思路是 ： 以 D( r,j ) 表示第 r 行第j各数字
           （r ，j）都从1开始算，以 MaxSum（r ，j）代表从第r行的第 j 个数字到底边的最佳路径
          的数字之和，则本题目要求MaxSum（1，1）
        
        从 某个 D(r,j)出发，显然下一步只能走D(r+1,j)或 D(r+1，j+1) 如果走 D(r+1,j),
        那么得到的MaxSum（r,j) 就是 MaxSum(r + 1 , j + 1 ) + D( r , j )
        所以选择往哪走 ，就需要比较 MaxSim(r + 1,j) 和 MaxSim(r + 1 ,j +1 )谁的值更大
        
// 满足两个条件的问题才可以用 动态规划的办法求解： 
 （1） 问题具有最优子结构性质
        如果问题的最优解包含的子问题的解也是最优的，就称该问题具有最优子结构性质
 （2） 无后效性
        当前若干个状态值一旦确定，则此后过程的演变就只和这若干个状态的值有关，与之前是采取
        那种手段或经过哪条路径演变到当前若干个状态无关
*******************************************************************************/


